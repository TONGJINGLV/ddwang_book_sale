# Generated by Django 2.2.5 on 2020-01-01 03:38

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('book_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('author', models.CharField(blank=True, max_length=1023, null=True)),
                ('edition', models.CharField(blank=True, max_length=1023, null=True)),
                ('format', models.CharField(blank=True, max_length=127, null=True)),
                ('pages', models.IntegerField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True, verbose_name='average score')),
                ('score_num', models.IntegerField(blank=True, null=True, verbose_name='the number of readers who scored')),
                ('comment_num', models.IntegerField(blank=True, null=True, verbose_name='the number of readers who comment')),
                ('genres', models.CharField(blank=True, max_length=1023, null=True)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('price', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, 'the price should not below zero.')])),
                ('on_sale', models.CharField(choices=[('Y', 'on sale'), ('N', 'not sale')], default='N', max_length=1, verbose_name='on sale or not')),
            ],
        ),
        migrations.CreateModel(
            name='Bookstore',
            fields=[
                ('bsname', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='bookstore name')),
                ('bstel', models.CharField(max_length=8, verbose_name='bookstore tel')),
                ('baddr', models.CharField(blank=True, max_length=255, null=True, verbose_name='bookstore address')),
                ('bosstel', models.CharField(blank=True, max_length=13, null=True, verbose_name='boss tel')),
                ('bosspasswd', models.CharField(blank=True, max_length=255, null=True, verbose_name='boss password')),
                ('staffpasswd', models.CharField(blank=True, max_length=255, null=True, verbose_name='staff password')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('cname', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='customer name')),
                ('ctel', models.CharField(blank=True, max_length=11, null=True, verbose_name='customer tel')),
                ('last_active_time', models.DateTimeField(blank=True, null=True)),
                ('password', models.CharField(default='12345678', max_length=255, verbose_name='customer password')),
                ('session', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('oid', models.AutoField(primary_key=True, serialize=False)),
                ('order_time', models.DateTimeField()),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('ctel', models.CharField(blank=True, max_length=11, null=True, verbose_name='customer tel')),
                ('type', models.CharField(choices=[('Y', 'buy'), ('N', 'return')], default='Y', max_length=1, verbose_name='buy or return')),
                ('sendtime', models.DateTimeField(blank=True, null=True, verbose_name='Send Time')),
                ('closetime', models.DateTimeField(blank=True, null=True, verbose_name='Close Time')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='uauth.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('sid', models.AutoField(primary_key=True, serialize=False)),
                ('sname', models.CharField(max_length=255, verbose_name='supplier name')),
                ('stel', models.CharField(max_length=8, verbose_name='supplier tel')),
                ('scity', models.CharField(blank=True, max_length=31, null=True, verbose_name='supplier city')),
            ],
        ),
        migrations.CreateModel(
            name='Purchaseorder',
            fields=[
                ('poid', models.AutoField(primary_key=True, serialize=False)),
                ('porder_time', models.DateTimeField(verbose_name='Order Time')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='uauth.Supplier')),
            ],
        ),
        migrations.CreateModel(
            name='Purchaseorderdetail',
            fields=[
                ('podid', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('price', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, 'the price should not below zero.')])),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='uauth.Book')),
                ('purchaseorder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uauth.Purchaseorder')),
            ],
            options={
                'unique_together': {('purchaseorder', 'book')},
            },
        ),
        migrations.CreateModel(
            name='Orderdetail',
            fields=[
                ('odid', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='uauth.Book')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uauth.Order')),
            ],
            options={
                'unique_together': {('order', 'book')},
            },
        ),
    ]
